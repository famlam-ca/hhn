generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    user
    superuser
    admin
}

enum Theme {
    dark
    light
}

model User {
    id              String  @id
    display_name    String
    username        String  @unique()
    first_name      String?
    last_name       String?
    email           String  @unique()
    isEmailVerified Boolean @default(false)
    password        String

    image String  @default("https://www.famlam.ca/logo/logo512-blue-s.png")
    role  Role    @default(user)
    bio   String? @db.Text
    theme Theme   @default(dark)

    sessions          Session[]
    emailVerification EmailVerification[]
    resetPassword     ResetPassword[]
    supportTickets    SupportTicket[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    id String @id

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime @db.Timestamp(0)

    @@index([userId])
}

model EmailVerification {
    id   String @id
    code String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    sentAt    DateTime @db.Timestamp(0)

    @@index([userId])
}

model ResetPassword {
    id   String @id
    code String

    userEmail String
    user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    sentAt    DateTime @db.Timestamp(0)

    @@index([userEmail])
}

enum SupportTicketStatus {
    open
    closed
    pending
    resolved
}

model SupportTicket {
    id String @id

    senderUsername String?
    senderName     String?
    senderEmail    String

    subject String @db.Text
    message String @db.Text

    status        SupportTicketStatus @default(open)
    statusMessage String?

    user User @relation(fields: [senderEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    sentAt    DateTime @db.Timestamp(0)

    @@index([senderEmail])
}
